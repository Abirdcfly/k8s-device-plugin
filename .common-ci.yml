# Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

default:
  image: docker:stable
  services:
    - name: docker:stable-dind
      command: ["--experimental"]

variables:
  IMAGE_NAME: k8s-device-plugin
  BUILDIMAGE: "${CI_REGISTRY_IMAGE}/device-plugin-build:${CI_COMMIT_SHORT_SHA}"

stages:
  - image
  - lint
  - go-checks
  - go-build
  - unit-tests
  - build
  - release

build-dev-image:
  stage: image
  script:
    - apk --no-cache add make bash
    - make .build-image
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - make .push-build-image

.requires-build-image:
  image: "${BUILDIMAGE}"

.go-check:
  extends:
    - .requires-build-image
  stage: go-checks

fmt:
  extends:
    - .go-check
  script:
    - make assert-fmt

vet:
  extends:
    - .go-check
  script:
    - make vet

go-lint:
  extends:
    - .go-check
  script:
    - make lint

ineffassign:
  extends:
    - .go-check
  script:
    - make ineffassign

misspell:
  extends:
    - .go-check
  script:
    - make misspell

go-build:
  extends:
    - .requires-build-image
  stage: go-build
  script:
    - make build

unit-tests:
  extends:
    - .requires-build-image
  stage: unit-tests
  script:
    - make coverage

.buildx-setup:
  before_script:
    -  export BUILDX_VERSION=v0.6.3
    -  apk add --no-cache curl
    -  mkdir -p ~/.docker/cli-plugins
    -  curl -sSLo ~/.docker/cli-plugins/docker-buildx "https://github.com/docker/buildx/releases/download/${BUILDX_VERSION}/buildx-${BUILDX_VERSION}.linux-amd64"
    -  chmod a+x ~/.docker/cli-plugins/docker-buildx

    -  docker buildx create --use

    -  docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

# The .build step forms the base of the image builds with each variant
# defined as a build-${VARIANT} step.
.build:
  stage: build
  variables:
    REGISTRY: "${CI_REGISTRY_IMAGE}"
    VERSION: "${CI_COMMIT_SHORT_SHA}"
    DOCKER_CACHE_TO: docker-build-cache
  before_script:
    - !reference [.buildx-setup, before_script]

    - apk add --no-cache make bash

    - 'echo "Logging in to CI registry ${CI_REGISTRY}"'
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"

  script:
    - make push-multi-arch-${DIST}

  artifacts:
    when: always
    paths:
      - docker-build-cache/
    expire_in: 3 hours

.dist:ubuntu20.04:
  variables:
    DIST: ubuntu20.04

build:device-plugin:ubuntu20.04:
  extends:
    - .build
    - .dist:ubuntu20.04

# .release forms the base of the deployment jobs which push images to the CI registry.
# This is extended with the version to be deployed (e.g. the SHA or TAG) and the
# target os.
.release:
  variables:
    DOCKER_CACHE_FROM: docker-build-cache
  stage: release
  before_script:
    # We ensure that the OUT_VERSION is set
    - 'echo Version: ${OUT_VERSION} ; [[ -n "${OUT_VERSION}" ]] || exit 1'

    - !reference [.buildx-setup, before_script]

    - apk add --no-cache make bash

    - 'echo "Logging in to CI registry ${CI_REGISTRY}"'
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"

  script:
    - 'echo "Logging in to output registry ${OUT_REGISTRY}"'
    - '[[ $OUT_REGISTRY == ${CI_REGISTRY} ]] || docker login -u "${OUT_REGISTRY_USER}" -p "${OUT_REGISTRY_TOKEN}" "${OUT_REGISTRY}"'

    - make release-multi-arch-${DIST}

# Define a staging release step that pushes an image to an internal "staging" repository
# This is triggered for all pipelines (i.e. not only tags) to test the pipeline steps
# outside of the release process.
.release:staging:
  extends:
    - .release
  variables:
    # Define the output registry
    OUT_REGISTRY_USER: "${CI_REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${CI_REGISTRY_PASSWORD}"
    OUT_REGISTRY: "${CI_REGISTRY}"

    # Define the source image for the release
    REGISTRY: "${CI_REGISTRY_IMAGE}"
    VERSION: "${CI_COMMIT_SHORT_SHA}"

    # Define the output image directly
    OUT_IMAGE: "${CI_REGISTRY_IMAGE}/staging/${IMAGE_NAME}"
    OUT_VERSION: "${CI_COMMIT_SHORT_SHA}"

release:staging:device-plugin:ubuntu20.04:
  extends:
    - .release:staging
    - .dist:ubuntu20.04
